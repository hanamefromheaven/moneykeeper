import os
import asyncio
import logging
from telethon import TelegramClient, events
from telethon.tl.types import Message, DocumentAttributeFilename
from telethon.errors import FloodWaitError
from config import API_ID, API_HASH, SOURCE_GROUP_ID, TARGET_GROUP_ID

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,  # –£–º–µ–Ω—å—à–∏–ª –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


class ThreadCloner:
    def __init__(self, source_topic_id: int, target_topic_id: int, message_map: dict):
        self.source_topic_id = int(source_topic_id) if source_topic_id else None
        self.target_topic_id = int(target_topic_id)
        self.message_map = message_map
        logger.info(f"üîß ThreadCloner created: {source_topic_id} ‚Üí {target_topic_id}")

    def get_message_topic_id(self, message: Message):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not message.reply_to:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:
            # 1. –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–µ–º —á–∞—Ç–µ (topic_id = None)
            # 2. –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ (topic_id = message.id)
            return None
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å reply_to_top_id - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ
        if hasattr(message.reply_to, 'reply_to_top_id') and message.reply_to.reply_to_top_id:
            return message.reply_to.reply_to_top_id
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å forum_topic - —ç—Ç–æ —Ç–æ–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ
        if hasattr(message.reply_to, 'forum_topic') and message.reply_to.forum_topic:
            return message.reply_to.reply_to_msg_id
            
        return None

    async def handle_message(self, client: TelegramClient, message: Message):
        logger.info(f"üîç ANALYZING MESSAGE {message.id}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_topic_id = self.get_message_topic_id(message)
        logger.info(f"üìå Message topic: {message_topic_id}, looking for: {self.source_topic_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–ø–∏–∫—É
        if self.source_topic_id is None:
            # –ö–ª–æ–Ω–µ—Ä –¥–ª—è –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∏–∑ —Ç–æ–ø–∏–∫–æ–≤)
            if message_topic_id is not None:
                logger.info(f"‚ùå Message {message.id} is from topic {message_topic_id}, but we want general messages")
                return
        else:
            # –ö–ª–æ–Ω–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞
            if message_topic_id != self.source_topic_id:
                logger.info(f"‚ùå Message {message.id} ignored (topic {message_topic_id} != {self.source_topic_id})")
                return

        logger.info(f"‚úÖ PROCESSING message {message.id}")
        print(f"üì® Cloning message: {message.message[:50] if message.message else '[Media]'}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º reply_to –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_to_msg_id = None
        if message.reply_to and message.reply_to.reply_to_msg_id:
            source_reply_id = message.reply_to.reply_to_msg_id
            reply_to_msg_id = self.message_map.get(source_reply_id)
            logger.info(f"üîó Reply mapping: {source_reply_id} ‚Üí {reply_to_msg_id}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏
        kwargs = {
            'entity': TARGET_GROUP_ID,
            'message': message.message or '',
            'parse_mode': 'html' if message.entities else None,
            'link_preview': False,
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–æ–ø–∏–∫ –∏–ª–∏ –æ–±—â–∏–π —á–∞—Ç
        if reply_to_msg_id:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            kwargs['reply_to'] = reply_to_msg_id
            logger.info(f"üì§ Will reply to message: {reply_to_msg_id}")
        elif self.target_topic_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–ø–∏–∫
            kwargs['reply_to'] = self.target_topic_id
            logger.info(f"üì§ Will send to topic: {self.target_topic_id}")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç (–±–µ–∑ reply_to)
            logger.info(f"üì§ Will send to general chat")

        logger.info(f"üì¶ Send kwargs: {kwargs}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
        downloaded = None
        if message.media:
            logger.info(f"üñºÔ∏è Processing media for message {message.id}")
            try:
                file_name = None
                if message.document:
                    for attr in message.document.attributes:
                        if isinstance(attr, DocumentAttributeFilename):
                            file_name = attr.file_name
                            break

                os.makedirs('temp', exist_ok=True)

                if file_name:
                    path = os.path.join('temp', file_name)
                    downloaded = await message.download_media(path)
                else:
                    downloaded = await message.download_media('temp')

                kwargs['file'] = downloaded
                logger.info(f"üìÅ Media downloaded: {downloaded}")

                if message.sticker:
                    kwargs['message'] = ''

            except Exception as e:
                logger.error(f"‚ùå Media download failed for message {message.id}: {e}")
                kwargs['message'] = '(Media unavailable)'

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            logger.info(f"üöÄ SENDING MESSAGE...")
            sent = await client.send_message(**kwargs)
            self.message_map[message.id] = sent.id
            logger.info(f"‚úÖ SUCCESS! Sent cloned message {sent.id} from source {message.id}")
            print(f"‚úÖ Message cloned: {message.id} ‚Üí {sent.id}")

        except FloodWaitError as e:
            logger.warning(f"‚è≥ FloodWaitError: sleeping for {e.seconds} seconds")
            await asyncio.sleep(e.seconds)
            await self.handle_message(client, message)
        except Exception as e:
            logger.error(f"‚ùå FAILED to send message {message.id}: {e}")
            logger.error(f"‚ùå Error type: {type(e)}")
            print(f"‚ùå Error sending message: {e}")
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
            if downloaded and os.path.exists(downloaded):
                try:
                    os.remove(downloaded)
                    logger.debug(f"üóëÔ∏è Deleted temp file: {downloaded}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Failed to delete temp file {downloaded}: {e}")


async def main():
    print("üöÄ Starting Telegram cloner...")
    logger.info("Starting client...")
    
    client = TelegramClient("session", API_ID, API_HASH)
    await client.start()
    logger.info("‚úÖ Client started successfully")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
    me = await client.get_me()
    logger.info(f"üë§ Logged in as: {me.first_name} (@{me.username})")
    print(f"üë§ Logged in as: {me.first_name} (@{me.username})")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –≥—Ä—É–ø–ø—É
    logger.info(f"üîç Resolving SOURCE_GROUP_ID: {SOURCE_GROUP_ID}")
    try:
        source_entity = await client.get_entity(SOURCE_GROUP_ID)
        logger.info(f"‚úÖ Source entity: {source_entity.title} (ID: {source_entity.id})")
        print(f"üì• Source: {source_entity.title}")
        
        if hasattr(source_entity, 'forum') and source_entity.forum:
            logger.info("üèõÔ∏è Source is a forum group")
            print("üèõÔ∏è Source is a forum group")
        else:
            logger.warning("‚ö†Ô∏è Source might not be a forum group")
            print("‚ö†Ô∏è Source might not be a forum group")
            
    except Exception as e:
        logger.critical(f"‚ùå Failed to resolve SOURCE_GROUP_ID: {e}")
        print(f"‚ùå Cannot access source group: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É
    logger.info(f"üîç Resolving TARGET_GROUP_ID: {TARGET_GROUP_ID}")
    try:
        target_entity = await client.get_entity(TARGET_GROUP_ID)
        logger.info(f"‚úÖ Target entity: {target_entity.title} (ID: {target_entity.id})")
        print(f"üì§ Target: {target_entity.title}")
        
        if hasattr(target_entity, 'forum') and target_entity.forum:
            logger.info("üèõÔ∏è Target is a forum group")
            print("üèõÔ∏è Target is a forum group")
        else:
            logger.warning("‚ö†Ô∏è Target might not be a forum group")
            print("‚ö†Ô∏è Target might not be a forum group")
            
    except Exception as e:
        logger.critical(f"‚ùå Failed to resolve TARGET_GROUP_ID: {e}")
        print(f"‚ùå Cannot access target group: {e}")
        return

    message_map = {}

    # –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
    cloners_config = [
        {'source_topic': 674, 'target_topic': 12},
        {'source_topic': 675, 'target_topic': 10},
        {'source_topic': 679, 'target_topic': 8},
        {'source_topic': 678, 'target_topic': 6},
        {'source_topic': 676, 'target_topic': 4},
        {'source_topic': 753, 'target_topic': 2}
     ]

    cloners = []
    for cfg in cloners_config:
        cloner = ThreadCloner(cfg['source_topic'], cfg['target_topic'], message_map)
        cloners.append(cloner)
        
        source_desc = f"Topic {cfg['source_topic']}" if cfg['source_topic'] else "General chat"
        target_desc = f"Topic {cfg['target_topic']}" if cfg['target_topic'] else "General chat"
        print(f"üîß Cloner: {source_desc} ‚Üí {target_desc}")

    @client.on(events.NewMessage(chats=source_entity))
    async def handle_new_message(event):
        print(f"‚ö° NEW MESSAGE: {event.message.id}")
        msg = event.message
        
        print(f"üìù Text: {msg.message[:100] if msg.message else '[No text]'}")
        
        for i, cloner in enumerate(cloners):
            try:
                logger.info(f"üîÑ Running cloner {i+1}")
                await cloner.handle_message(client, msg)
            except Exception as e:
                logger.error(f"‚ùå Error in cloner {i+1}: {e}")
                print(f"‚ùå Cloner {i+1} error: {e}")
    @client.on(events.MessageEdited(chats=source_entity))
    async def handle_edited_message(event):
        msg = event.message
        target_msg_id = message_map.get(msg.id)
        print(f"‚úèÔ∏è EDITED MESSAGE: {msg.id}")

        if not target_msg_id:
            logger.info(f"‚ö†Ô∏è Edited message {msg.id} –Ω–µ –∏–º–µ–µ—Ç –∫–æ–ø–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        try:
            await client.edit_message(TARGET_GROUP_ID, target_msg_id, msg.message or "")        
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —É–∂–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ                await client.edit_message(TARGET_GROUP_ID, target_msg_id, msg.message or "")
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.id} ‚Üí {target_msg_id}")
        except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {msg.id}: {e}")

    logger.info("‚úÖ Message handler registered")
    print("üéØ Bot is ready!")
    print("üí° Now send messages:")
    print("   - General messages (will be cloned by cloner 3)")
    print("   - Messages in Topic 1 (will be cloned by cloner 2)")  
    print("   - Messages in Topic 2 (will be cloned by cloner 1)")
    print("üîç Waiting for messages...")
    
    await client.run_until_disconnected()


if __name__ == "__main__":
    asyncio.run(main())